#!/bin/sh
#showacct- display user account information
#Written by Wei Feinstein 9/2016
#Version 2.1

input=$1
verbose=false

Usage(){
	echo "Usage: $0 [option]"
	echo "                   [-h]: help"
        echo "                   [uid]: sudo access"$'\n'
}

if (( "$#" == 1 )); then
	if [ ${input:0:1} == '-' ]; then
		Usage			
		exit 1
	elif [[ `groups|grep root|wc -l` == 1 || "$input" == "$USER" ]]; then 
	        user=$input
 	else		
		echo "Please sudo to users' account"$'\n'
		exit 1
	fi
else 
	user=$USER
	verbose=true
fi
if [ $user == "root" ]; then
	echo "root: invalid user name" $'\n'
	Usage
	exit 1
fi

echo ""
showq=$(showquota $user 2>&1 >/dev/null |grep "No such user")
if [ ! -z "$showq"  ]; then
	echo "$user: invalid user name"$'\n' 
	exit 1
elif [ `hostname|grep smic|wc -l` == 0 ];then	
	showquota $user |awk '{if  (/^$/) exit; else print}'
elif [ `hostname|grep smic|wc -l` == 1 ]; then	# smic shares the same storage on /project /work
	showquota $user |awk '{if ((/project/) || (/^$/)) exit; else print}'
	exist=$(cat /home/admin/diskscan/report.project |grep $user) 
	if [ ! -z "$exist" ]; then
		quota=$(cat /home/admin/diskscan/report.project |grep $user |awk '{print $7}')
		if [ $quota -gt 0 ]; then
			a=$(showquota $user |grep project|awk '{print $1}')
	      	  b=$(showquota $user |grep project|awk '{print $2}')
        		d=$(showquota $user |grep project|awk '{print $4}')
	      	  e=$(showquota $user |grep project|awk '{print $5}')
			echo $a $b $d $d $e|awk -v var=$quota '{printf("%13s\t%10s\t%6s\t%10s\t%s\n" ), $1, $2, var*1000, $4, $5}'	
		fi
	fi
fi

echo ""
showquota $user |grep "home"|awk '{print "/home has used "$2"M from "$3"M (quota), which contains "$4" files"}'
if [  `hostname|grep smic|wc -l` == 1 ]; then
	exist=$(cat /home/admin/diskscan/report.project |grep $user) 	
	if [ ! -z "$exist" ]; then
		quota=$(cat /home/admin/diskscan/report.project |grep $user|awk '{print $7}')
		if [ $quota -gt 0 ]; then
			showquota $user |grep "project"|awk -v var="$quota" '{print "/project+/work, which contain "$4" files, have used "$2"M from "var"GB (/project)"}'
		fi
		else 
		showquota $user |grep "project"|awk '{print "/project has used "$2"M from "$3"MB (quota), which contains "$4" files"}'
		fi
	fi


echo ""
export GOLD_HOME=/usr/local/packages/gold
alc_date=( $($GOLD_HOME/bin/bal.pl $user|sed -e '1,/-----/d'|awk '{if  (/^$/) exit; else print}' |awk -F  "|" '{print $1":"$NF}') )

echo "Allocations: Balance(SUs) End date"
alc_su=( $( showquota $user |sed -e '1,/^$/d' |tail -n +2|sed s/\ /\/g) )
for (( i=0; i<${#alc_su[@]}; i++ )); 
do 
	ALC=$(printf '%s\n' "${alc_su[i]}" |sed -e s/\:/\ /g | awk '{print $1}')
	SUS=$(printf '%s\n' "${alc_su[i]}" |sed -e s/\:/\ /g | awk '{print $2}')
	date=$(printf '%s\n' ${alc_date[@]} | grep $ALC | wc -l)	
	if [ $date -gt 0 ]; then
		YEAR=$(printf '%s\n' "${alc_date[@]}" | grep $ALC | sed -e s/\:/\ /g| awk '{print $2}')
	else
		YEAR=2038-12-31
	fi
	echo $ALC $SUS $YEAR
done

echo $'\n'"Account Status:"
normal_job_ct=$(mdiag -u DEFAULT|grep DEFAULT|awk '{print $8}'|sed s/\=/\ / | awk '{print $2}')
result=$(mdiag -u |grep $user| awk '{print $8}')
if [  "$result" != "-" ];then
        allowed_job_ct=$(echo $result|sed s/\=/\ / | awk '{print $2}')
        echo "Job submission is throttled to $allowed_job_ct from $normal_job_ct"
else echo "Job submission allowance is normal, MAX = $normal_job_ct jobs"
fi

q_deny="/home/admin/etc/qsub.deny"
if [ -e $q_deny ]; then
        qsub=$(grep $user $q_deny)
        if [[ ! -z "$qsub" ]] ; then       #not found     && [[ "${qsub:0:1}" != "#" ]]; then
		ct=$(echo $qsub|awk '{print NF}')
		if [ "$ct" > 1 ]; then		# e.g. mforoo1 work #mforoo1 bigmem mforoo1 bigmemtb

			for (( i =2; i <=$ct; i+=2 )); 
			do 
				j=$(echo $i-1|bc)				
				queue=$(echo $qsub|awk -v var="$i" '{print $var}'); 
				name=$(echo $qsub|awk -v var="$j" '{print $var}'); 
				if [[ ! -z "$queue" ]] && [[ "${name:0:1}" != "#" ]]; then
                        	echo Submitting jobs to the \"$queue\" queue is blocked
      			fi
			done

       	elif [ "${qsub:0:1}" == "#" ]; then
			echo "Jobs can be submitted to all the available queues"   # e.g. #privero
		else echo "You are blocked to all the queuee on this cluster!"	# e.g. privero
		fi

	   else  echo "Jobs can be submitted to all the available queues" 
         fi
else  echo "Jobs can be submitted to all the available queues" 
fi


cpu_deny="/home/admin/etc/user.deny"

if [ -e $cpu_deny ]; then
        head_pro=$(grep  $user $cpu_deny)
        if [[ ! -z "$head_pro" && "${head_pro:0:1}" != "#" ]];then
                ct=$(echo $head_pro|awk '{print $2}')
                if [ ! -z "$ct" ]; then
			if [ $verbose == "false" ]; then
                        echo "The user has less than $ct CPU minutes on the head nodeis"
			else echo "You have been running compute jobs on the head nodes, any CPU bound process on the head nodes will be terminated after $ct CPU minutes (reduced from 30). "$'\n'Please refrain from running compute jobs on the head nodes and refer to the user guide on how to submit batch and interactive jobs.
			fi
                else 
			if [ $verbose == "false" ]; then echo "The user is not allowed to run any tasks on the head nodes."
			else echo "You have been running compute jobs on the head nodes. Therefore, any CPU bound process on the head nodes will be killedimmediately. "$'\n'Please refrain from running compute jobs on the head nodes and refer to the user guide on how to submit batch and interactive jobs.
			fi
                fi        
	fi
fi
#check LOGIN SHELL
if [ ! -z `finger $user|grep Shell|awk '{print $4}'|grep nologin` ]; then
        echo "Login shell is set to nologin, user account is blocked"
fi

if [ $verbose == "true" ]; then
	echo $'\n'----Please contact sys-help@loni.org for any questions---- $'\n'
else echo ""
fi
